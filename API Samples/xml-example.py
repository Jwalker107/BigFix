# A useful reference - 
# https://pymotw.com/2/xml/etree/ElementTree/create.html

##### Generate the following XML on the fly:
##<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
##  <!-- XML generated by ElementTree -->
##  <SingleAction>
##	<Title>Test</Title>
##	<Relevance>True</Relevance>
##	<ActionScript>//hello world
## //here is line two</ActionScript>
##	<SuccessCriteria>RunToCompletion</SuccessCriteria>
##	<Target><ComputerID>1611280045</ComputerID></Target>
##	<SourceFixlet>
##	<Sitename>Test</Sitename>
##	<FixletID>40</FixletID>
##	<Action>Action1</Action>
##	</SourceFixlet>
##	<MIMEField>
##	  <Name>locking-exempt</Name>
##	  <Value>1</Value>
##	</MIMEField>
##  </SingleAction>
##</BES>


from xml.etree import ElementTree
#from xml.etree.ElementTree import Element, SubElement, Comment, tostring

from xml.dom import minidom

# One way to create a new element			
root=ElementTree.Element('BES')
# Set attributes on the element
root.set('xmlns:xsi','http://www.w3.org/2001/XMLSchema-instance')
root.set('xsi:noNamespaceSchemaLocation','BES.xsd')
# Append a comment to the root element
root.append(ElementTree.Comment('XML Generated by ElementTree'))

# One method to create a child element - build a new element and append it to an existing element
parent=root
if parent.find('SingleAction') is None:
	newchild=ElementTree.Element('SingleAction')
	parent.append(newchild)
# move 'parent' to the existing or newly-created child node to continue building out the tree
parent=root.find('SingleAction')

if parent.find('Title') is None:
	newchild=ElementTree.Element('Title')
	parent.append(newchild)
parent=parent.find('Title')
parent.text='This is my action title'

# Another method to create a new child node is to use ElementTree.SubElement, which will create new sub-elements as needed
# Normally we would want to retrieve the original relevance from the source fixlet via a REST API call, but for XML illustration we just set the Relevance to 'True'
parent=root.find('SingleAction')
newnode=ElementTree.SubElement(parent,"Relevance")
newnode.text="True"

# Normally we would want to retrieve the original ActionScript from the source fixlet via a REST API call, but for XML illustration we just set hardcode some script
newnode=ElementTree.SubElement(parent,"ActionScript")
newnode.text="""//hello world
//here is line two"""

newnode=ElementTree.SubElement(parent,"SuccessCriteria")
newnode.text="RunToCompletion"

#We can also walk directly down through new nodes = here the first SubElement is of parent, and the second is a subelement of newnode
newnode=ElementTree.SubElement(parent,"Target")
newnode=ElementTree.SubElement(newnode,"ComputerID")
newnode.text="1611280045"

parent=root.find('SingleAction')
newnode=ElementTree.SubElement(parent,'SourceFixlet')
parent=newnode
newnode=ElementTree.SubElement(parent,'SiteName')
newnode.text="HCL-Lab-Services-Test"
#  We are declaring the SourceFixlet by SiteName; the following lines could define it via GatherURL or SiteID instead.
# Source Site via GatherURL:
#newnode=ElementTree.SubElement(parent,'GatherURL')
#newnode.text="http://BES-Dev-Root:52311/cgi-bin/bfgather.exe/CustomSite_Test"

# Source Site via Site ID:
#newnode=ElementTree.SubElement(parent,'SiteID')
#newnode.text="1"

# ID of the source fixlet, and the name of the Action within that fixlet:
newnode=ElementTree.SubElement(parent,'FixletID')
newnode.text='40'

newnode=ElementTree.SubElement(parent,'Action')
newnode.text='Action1'

parent=root.find('SingleAction')
newnode=ElementTree.SubElement(parent,'MIMEField')
parent=newnode
newnode=ElementTree.SubElement(parent,'Name')
newnode.text='locking-exempt'
newnode=ElementTree.SubElement(parent,'Value')
newnode.text='1'

# Normally we would POST this back to the server via REST API, but for example just print it to the screen
# Print the resulting XML
print(((ElementTree.tostring(root,encoding='UTF-8',method='xml').decode())))

# "Pretty-Print" it using xml.dom.minidom, which adds line separators and indentation
dom=minidom.parseString(ElementTree.tostring(root, encoding='UTF-8', method='xml').decode())
print(dom.toprettyxml())
