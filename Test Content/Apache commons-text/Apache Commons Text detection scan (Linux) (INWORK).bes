<?xml version='1.0' encoding='utf-8'?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Task>
		<Title>Apache Commons Text detection scan (Linux) (INWORK)</Title>
		<Description>&lt;H3&gt;This is Community Content. When you use these solutions, it is incumbent on your organization to test any solutions provided across the broadest available system base including various OS, storage solutions, and application inventory.&lt;/H3&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Please see the &lt;A href="https://forum.bigfix.com/t/log4j-vulnerability-identification-and-3rd-party-remediation-solution-testing-statement/40273"&gt;&lt;FONT color=#0066cc&gt;Community Solution Testing Statement&lt;/FONT&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;This Task performs a filesystem scan on Linux systems to attempt detecting Apache Commons Text versions vulnerable to CVE-2022-42889.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om"&gt;https://lists.apache.org/thread/n2bd4vdsgkqh2tm14l1wyc3jyol7s1om&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://nvd.nist.gov/vuln/detail/CVE-2022-42889"&gt;https://nvd.nist.gov/vuln/detail/CVE-2022-42889&lt;/A&gt;&lt;BR&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This Task performs a filesystem search across all fixed disks on Linux platforms, to locate Apache Commons Text JAR files, either directly on the filesystem or embedded in a .WAR archive file.&amp;nbsp; In the case any .WAR file is found on the system, the 'unzip' utility is used to perform a listing of files inside the archive to locate Apache Commons Text-related JAR files.&amp;nbsp; Specifically, this Task searches for any versions of commons-text-X.X.X.jar.&lt;/P&gt;
&lt;P&gt;Scan results are stored in a "Scans" subdirectory beneath the "BES Client" folder. 'apache-commons-text.log' contains the full script output for potential debugging or diagnosis, and 'apache-commons-text.txt' contains a listing of detected files in one of the forms&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;/tmp/commons-text/1.4/commons-text-1.4.jar&lt;/LI&gt;
&lt;LI&gt;/tmp/commons-text.war::commons-text/1.10.0/commons-text-1.10.0.jar&lt;BR&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The first sample entry indicates a detected .jar file directly in the filesystem, while the second entry indicates a detected .jar file embedded within a .WAR archive.&lt;/P&gt;
&lt;P&gt;This Task has several known limitations:&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Archives are not extracted recursively - only .JAR files contained directly within a .WAR archive are found; archives embedded within multiple layers of .WAR archives are not detected. 
&lt;LI&gt;There is no option to throttle the scan in terms of processor or disk i/o usage.&amp;nbsp; Scans should be executed during non-critical hours, and staggered over time especially where multiple systems share a storage resource, such as a SAN or virtual machine storage pool.&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This detection method uses&amp;nbsp;Linux Bash script with&amp;nbsp;external&amp;nbsp;dependencies on 'df', 'find', 'sed', and&amp;nbsp;'unzip'.&amp;nbsp; Results of the scan may be retrieved using the related Analysis.&lt;/P&gt;</Description>
		<Relevance>(if exists property "in proxy agent context" then not in proxy agent context else true)</Relevance>
		<Relevance>name of operating system as lowercase contains "linux"</Relevance>
		<Category />
		<Source>Internal</Source>
		<SourceID />
		<SourceReleaseDate>2022-03-31</SourceReleaseDate>
		<SourceSeverity />
		<CVENames />
		<SANSID />
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Tue, 18 Oct 2022 16:08:36 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell">parameter "ScansFolder" = "{(if (version of client &gt;= "9" as version) then (pathname of parent folder of data folder of client) else (pathname of parent folder of parent folder of client folder of site "actionsite"))}/Scans"
folder create "{parameter "ScansFolder"}"
parameter "output"="{pathname of folder (parameter "ScansFolder")}/apache-commons-text.txt"
parameter "exec_output"="{pathname of folder (parameter "ScansFolder")}/apache-commons-text.log"
delete "{parameter "output"}"
delete "{parameter "exec_output"}"

delete __createfile
createfile until EOF_EOF_EOF_EOF
#!/bin/sh

OUTPUT_FILE={parameter "output"}

function handle_file() {{
 echo Handling $1
 if [[ $1 == *\.war || $1 == *\.WAR ||  $1 == *\.zip || $1 == *\.ZIP || $1 == *\.ear || $1 == *\.EAR ]]
 then
 echo "${{1} is an archive, searing content via unzip";
 for embeddedfile in `unzip -Z -1 "$1"  *commons-text-*.jar -x *-sources.jar *-javadoc.jar *-tests.jar`
 do
  echo ${{1}::${{embeddedfile}&gt;&gt;${{OUTPUT_FILE}
 done
else
echo ${{1}&gt;&gt;${{OUTPUT_FILE}
fi

}

for j in `df -l --output=target -x tmpfs -x devtmpfs | sed 1d`

 do echo "searching $j"
 for targetfile in `find $j -xdev \( -name "commons-text-*.jar" -o -name "*.war" \) -a ! \(  -name "*-sources.jar"  -o  -name "*-javadoc.jar" -o  -name "*-tests.jar" \)`
  do handle_file "$targetfile"
 done

done



EOF_EOF_EOF_EOF

delete run_scan.sh
copy __createfile run_scan.sh
wait chmod +x run_scan.sh
wait /bin/sh -c "./run_scan.sh &gt; '{parameter "exec_output"}' 2&gt;&amp;1"
</ActionScript>
		</DefaultAction>
	</Task>
</BES>